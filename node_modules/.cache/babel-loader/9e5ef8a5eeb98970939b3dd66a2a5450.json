{"ast":null,"code":"var _jsxFileName = \"/Users/emusha/FlatIron/code/project_5/Robust_Client/src/Containers/HomePage.js\";\nimport React, { Component } from 'react';\nimport ClassCard from \"../Components/ClassCard\";\nimport { connect } from \"react-redux\";\nimport { Switch, Route } from \"react-dom\";\n\nclass HomePage extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }, \" My Clasess\"), /*#__PURE__*/React.createElement(Route, {\n      path: \"/homepage\",\n      render: () => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui link centered cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      }, this.props.fetchedKlasses.map(k => /*#__PURE__*/React.createElement(ClassCard, {\n        key: k.id,\n        klass: k,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }));\n  }\n\n} // accepts state and returns an object that props map to the state\n\n\nconst mapStateToProps = state => {\n  console.log(\"Statie is \", state);\n  return {\n    fetchedKlasses: state.klasses\n  };\n};\n\nexport default connect(mapStateToProps)(HomePage); // export default HomePage\n// i want to get the sate from star and snik it as props\n// End product \n// Solution use connect (mapstatToProps) to map the state to props\n// mapstatToProps is a function that accepts the state from the store and return \n//    props with key and value \n// export the enhanced HomePage \n// Problem: getting the all klasses from api and dispatching it to store\n//           so that inital state has all klasses at the beginig\n// Solution: Request GET Fetch request when the component did monunt \n//Problem : if we have the fecth call on this component, when switching route this component gets\n//          mount and unmont each  time mainpage is clicked hence fetching that many times \n// Goal : we want to fetch only once\n// Solution: Make the fetch call in App where only one fetch is required\n// Problem: Every Component shoud be as dumb as possible and just handle props\n//          All state changes should happen in redux (store)\n// Solution: Redux thunk\n//         fetch inside action","map":{"version":3,"sources":["/Users/emusha/FlatIron/code/project_5/Robust_Client/src/Containers/HomePage.js"],"names":["React","Component","ClassCard","connect","Switch","Route","HomePage","render","props","fetchedKlasses","map","k","id","mapStateToProps","state","console","log","klasses"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,WAA5B;;AAGC,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAG9BM,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,eASQ,oBAAC,KAAD;AACI,MAAA,IAAI,EAAG,WADX;AAEI,MAAA,MAAM,EAAM,mBAE5B;AAAK,QAAA,SAAS,EAAE,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,KAAKC,KAAL,CAAWC,cAAX,CAA0BC,GAA1B,CAA8BC,CAAC,iBAC5B,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEA,CAAC,CAACC,EAAlB;AAAsB,QAAA,KAAK,EAAID,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAFD,CAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATR,CADJ;AA4BH;;AAhC6B,C,CAoClC;;;AACA,MAAME,eAAe,GAAKC,KAAF,IAAY;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA2BF,KAA3B;AACA,SAAO;AAEHL,IAAAA,cAAc,EAAEK,KAAK,CAACG;AAFnB,GAAP;AAKH,CAPD;;AASA,eAAed,OAAO,CAACU,eAAD,CAAP,CAAyBP,QAAzB,CAAf,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKI;AACA;AAEA;AAIJ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport ClassCard from \"../Components/ClassCard\"\nimport {connect} from \"react-redux\"\nimport {Switch, Route} from \"react-dom\"\n\n\n class HomePage extends Component {\n\n\n    render() {\n        return (\n            <div>\n\n                <h1> My Clasess</h1>\n                   {/* <Switch>\n                        <Route\n                            path = \"/klasses/:klassId\"\n                            component = {ClassCard}\n                        />\n                    </Switch> */}\n                    <Route\n                        path = \"/homepage\"\n                        render = {  () => (\n\n        <div className= \"ui link centered cards\">\n            \n        {this.props.fetchedKlasses.map(k =>  \n            <ClassCard key={k.id} klass = {k} /> )}\n            \n    </div> \n\n                        )} \n                    \n                    />\n\n                \n            </div>\n        )\n    }\n}\n\n\n// accepts state and returns an object that props map to the state\nconst mapStateToProps = ( state )=> {\n    console.log( \"Statie is \", state)\n    return {\n\n        fetchedKlasses: state.klasses\n    }\n \n}\n\nexport default connect(mapStateToProps)(HomePage) \n// export default HomePage\n\n// i want to get the sate from star and snik it as props\n// End product \n// Solution use connect (mapstatToProps) to map the state to props\n// mapstatToProps is a function that accepts the state from the store and return \n//    props with key and value \n// export the enhanced HomePage \n\n\n\n\n    // Problem: getting the all klasses from api and dispatching it to store\n    //           so that inital state has all klasses at the beginig\n    \n    // Solution: Request GET Fetch request when the component did monunt \n   \n  \n\n//Problem : if we have the fecth call on this component, when switching route this component gets\n//          mount and unmont each  time mainpage is clicked hence fetching that many times \n// Goal : we want to fetch only once\n// Solution: Make the fetch call in App where only one fetch is required\n\n// Problem: Every Component shoud be as dumb as possible and just handle props\n//          All state changes should happen in redux (store)\n// Solution: Redux thunk\n//         fetch inside action\n"]},"metadata":{},"sourceType":"module"}